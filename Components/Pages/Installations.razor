@page "/installations"
@using SystemInstaller.Application.Interfaces
@using SystemInstaller.Application.DTOs
@using DomainInstallationStatus = SystemInstaller.Domain.Enums.InstallationStatus
@inject IInstallationApplicationService InstallationService
@inject NavigationManager Navigation
@implements IDisposable

<PageTitle>Installation Tasks</PageTitle>

<div class="row">
    <div class="col-12">
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1>Installation Tasks</h1>
            <button class="btn btn-primary" @onclick="ShowCreateModal">
                <i class="fas fa-plus"></i> Create New Task
            </button>
        </div>
    </div>
</div>

<div class="row">
    <div class="col-12">
        @if (tasks.Any())
        {
            <div class="card">
                <div class="card-body">
                    <div class="table-responsive">
                        <table class="table table-hover">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Description</th>
                                    <th>Environment</th>
                                    <th>Status</th>
                                    <th>Progress</th>
                                    <th>Created</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var task in tasks)
                                {
                                    <tr>
                                        <td>
                                            <strong>@task.Name</strong>
                                        </td>
                                        <td class="text-muted">@task.Description</td>
                                        <td>
                                            <span class="badge bg-secondary">@task.EnvironmentName</span>
                                        </td>
                                        <td>
                                            <span class="badge @GetStatusBadgeClass(task.Status)">
                                                @task.Status
                                            </span>
                                        </td>
                                        <td>
                                            <div class="progress" style="width: 100px;">
                                                <div class="progress-bar @GetProgressBarClass(task.Status)" 
                                                     role="progressbar" 
                                                     style="width: @task.Progress%"
                                                     aria-valuenow="@task.Progress" 
                                                     aria-valuemin="0" 
                                                     aria-valuemax="100">
                                                </div>
                                            </div>
                                            <small class="text-muted">@task.Progress%</small>
                                        </td>
                                        <td>@task.CreatedAt.ToString("MMM dd, HH:mm")</td>
                                        <td>
                                            <div class="btn-group" role="group">
                                                <a href="/installations/@task.Id" class="btn btn-sm btn-outline-primary">
                                                    Details
                                                </a>
                                                @if (task.Status == DomainInstallationStatus.Pending)
                                                {
                                                    <button class="btn btn-sm btn-success" @onclick="() => StartInstallation(task.Id)">
                                                        Start
                                                    </button>
                                                }
                                                @if (task.Status == DomainInstallationStatus.Running)
                                                {
                                                    <button class="btn btn-sm btn-warning" @onclick="() => CancelInstallation(task.Id)">
                                                        Cancel
                                                    </button>
                                                }
                                            </div>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        }
        else
        {
            <div class="card">
                <div class="card-body text-center py-5">
                    <h5 class="text-muted">No installation tasks yet</h5>
                    <p class="text-muted">Create your first installation task to get started with environment deployments.</p>
                    <button class="btn btn-primary" @onclick="ShowCreateModal">
                        <i class="fas fa-plus"></i> Create Your First Task
                    </button>
                </div>
            </div>
        }
    </div>
</div>

<!-- Create Task Modal -->
@if (showCreateModal)
{
    <div class="modal show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Create New Installation Task</h5>
                    <button type="button" class="btn-close" @onclick="HideCreateModal"></button>
                </div>
                <div class="modal-body">
                    <form>
                        <div class="mb-3">
                            <label for="taskName" class="form-label">Task Name</label>
                            <input type="text" class="form-control" id="taskName" @bind="newTaskName" placeholder="Enter task name">
                        </div>
                        <div class="mb-3">
                            <label for="taskDescription" class="form-label">Description</label>
                            <textarea class="form-control" id="taskDescription" rows="3" @bind="newTaskDescription" placeholder="Describe what this installation will do"></textarea>
                        </div>
                        <div class="mb-3">
                            <label for="taskEnvironment" class="form-label">Environment</label>
                            <select class="form-select" id="taskEnvironment" @bind="selectedEnvironmentId">
                                <option value="@Guid.Empty">Select environment...</option>
                                @foreach (var env in availableEnvironments)
                                {
                                    <option value="@env.Id">@env.Name</option>
                                }
                            </select>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="HideCreateModal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="CreateTask" disabled="@(!CanCreateTask())">
                        Create Task
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<InstallationTaskResultDto> tasks = new();
    private List<InstallationEnvironmentResultDto> availableEnvironments = new();
    private bool showCreateModal = false;
    private string newTaskName = string.Empty;
    private string newTaskDescription = string.Empty;
    private Guid selectedEnvironmentId = Guid.Empty;

    protected override async Task OnInitializedAsync()
    {
        InstallationService.TaskUpdated += OnTaskUpdated;
        await LoadTasksAsync();
        await LoadEnvironmentsAsync();
    }

    private async Task LoadTasksAsync()
    {
        tasks = await InstallationService.GetAllTasksAsync();
    }

    private async Task LoadEnvironmentsAsync()
    {
        // For now, load environments for a default tenant - this would need proper tenant context
        availableEnvironments = await InstallationService.GetEnvironmentsAsync(Guid.Empty);
    }

    private void OnTaskUpdated(object? sender, InstallationTaskResultDto task)
    {
        InvokeAsync(async () =>
        {
            await LoadTasksAsync();
            StateHasChanged();
        });
    }

    private void ShowCreateModal()
    {
        showCreateModal = true;
        newTaskName = string.Empty;
        newTaskDescription = string.Empty;
        selectedEnvironmentId = Guid.Empty;
    }

    private void HideCreateModal()
    {
        showCreateModal = false;
    }

    private bool CanCreateTask()
    {
        return !string.IsNullOrWhiteSpace(newTaskName) && 
               selectedEnvironmentId != Guid.Empty;
    }

    private async Task CreateTask()
    {
        if (!CanCreateTask()) return;

        var dto = new CreateInstallationTaskDto
        {
            Name = newTaskName,
            Description = newTaskDescription,
            EnvironmentId = selectedEnvironmentId
        };

        var task = await InstallationService.CreateTaskAsync(dto);
        HideCreateModal();
        Navigation.NavigateTo($"/installations/{task.Id}");
    }

    private async Task StartInstallation(Guid taskId)
    {
        await InstallationService.StartInstallationAsync(taskId);
    }

    private async Task CancelInstallation(Guid taskId)
    {
        await InstallationService.CancelInstallationAsync(taskId);
    }

    private string GetStatusBadgeClass(DomainInstallationStatus status)
    {
        return status switch
        {
            DomainInstallationStatus.Pending => "bg-secondary",
            DomainInstallationStatus.Running => "bg-warning",
            DomainInstallationStatus.Completed => "bg-success",
            DomainInstallationStatus.Failed => "bg-danger",
            DomainInstallationStatus.Cancelled => "bg-dark",
            _ => "bg-secondary"
        };
    }

    private string GetProgressBarClass(DomainInstallationStatus status)
    {
        return status switch
        {
            DomainInstallationStatus.Running => "bg-warning",
            DomainInstallationStatus.Completed => "bg-success",
            DomainInstallationStatus.Failed => "bg-danger",
            _ => "bg-secondary"
        };
    }

    public void Dispose()
    {
        InstallationService.TaskUpdated -= OnTaskUpdated;
    }
}